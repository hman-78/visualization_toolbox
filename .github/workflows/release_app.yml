name: ReleaseApp
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        node-version: [22.x]
    outputs:
      app_version: ${{ steps.version_information.outputs.app_version }}
      build_number: ${{ steps.version_information.outputs.build_number }}
      artifact_name_prefix: ${{ steps.version_information.outputs.artifact_name_prefix }}
      tar_sha256: ${{ steps.package_app.outputs.tar_name }}
      slim_package_name: ${{ steps.package_app.outputs.slim_package_name }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './appserver/static/visualizations/hman/package-lock.json'
    # Write app version and workflow id to variables for later usage
    - name: Version information
      id: version_information
      run: |
           app_version=$(awk -F '=' '/^\[launcher\]/{f=1; next} /^\[/{f=0} f && /^version[[:space:]]*=/{print $2; exit}' default/app.conf | tr -d ' ')
           echo "App version: " $app_version
           echo "app_version=$app_version" >> $GITHUB_OUTPUT
           build_number="${{ github.run_id }}-${{ github.run_attempt }}"
           echo "Build number: $build_number"
           echo "build_number=$build_number" >> $GITHUB_OUTPUT
           app_version_short=$(echo $app_version | sed 's/\.//g')
           artifact_name_prefix="visualization_toolbox-${app_version}"
           echo "Artifact name: $artifact_name_prefix"
           echo "artifact_name_prefix=$artifact_name_prefix" >> $GITHUB_OUTPUT
           tar_name="visualization_toolbox-$app_version.tar.gz"
           echo "Tar.gz name: $tar_name"
           echo "tar_name=$tar_name" >> $GITHUB_OUTPUT
    - name: NPM install 
      run: |
           cd appserver/static/visualizations/hman
           npm install
    - name: NPM run build
      run: |
        cd appserver/static/visualizations/hman
        npm run build
    - name: upgrade version  
      run: npm install npm@latest -g  
      
    - name: npm update
      run: |
          cd appserver/static/visualizations/hman
          npm update
    - name: audit fund to fix a specific vulnerability 
      run: |
         cd appserver/static/visualizations/hman
         npm fund
    - name: npm audit fix
      run: |
         cd appserver/static/visualizations/hman
         npm audit fix --force
    - name: npm audit
      run: |
        cd appserver/static/visualizations/hman
        npm audit        
    - name: Clean node-modules
      run: | 
        cd appserver/static/visualizations/hman
        rm -rfv node_modules
    - name: Set build number app.conf
      run: |
          sed -i -e "s/replacebuild/${{ steps.version_information.outputs.build_number }}/g" default/app.conf  
    - name: install python 3.9
      uses: actions/setup-python@v5
      with: 
       python-version: '3.9'     
    - name: install packaging toolkit CLI
      run: | 
       pip install splunk-packaging-toolkit-1.0.1.tar.gz 
       pip --version
    - name: package App
      id: package_app
      run: |
          cd .. 
          slim package --output-dir=/home/runner/work/visualization_toolbox/staging_AppPackaging-results/ visualization_toolbox/
          echo ${{ steps.version_information.outputs.app_version }}
          TARNAME='visualization_toolbox-${{ steps.version_information.outputs.app_version }}.tar.gz'
          TARNAME_NO_WHITESPACE="$(echo -e "${TARNAME}" | tr -d '[:space:]')"
          echo "$TARNAME_NO_WHITESPACE"
          echo "slim_package_name=$TARNAME_NO_WHITESPACE" >> $GITHUB_OUTPUT
          ls /home/runner/work/visualization_toolbox/staging_AppPackaging-results/
          cd /home/runner/work/visualization_toolbox/staging_AppPackaging-results/
          tar_checksum=$(sha256sum $TARNAME_NO_WHITESPACE | awk '{print $1}')
          echo "Checksums:"
          find . -maxdepth 1 -type f -exec sha256sum {} \;
          echo "tar_checksum=$tar_checksum" >> $GITHUB_OUTPUT
          sha256sum $TARNAME_NO_WHITESPACE > $TARNAME_NO_WHITESPACE.sha256
    - name: Upload artifacts - Packagingtoolkit results
      id: upload_app
      uses: actions/upload-artifact@v4
      with:
       name:  ${{ steps.version_information.outputs.artifact_name_prefix }}_node_v${{ matrix.node-version }}
       path: /home/runner/work/visualization_toolbox/staging_AppPackaging-results
    - name: slim validate App
      run: |
          cd /home/runner/work/visualization_toolbox/staging_AppPackaging-results/ 
          slim validate ${{ steps.package_app.outputs.slim_package_name }}
    - name: Run Splunk AppInspect
      run: |
          pip install splunk-appinspect
          cd ..
          splunk-appinspect inspect /home/runner/work/visualization_toolbox/staging_AppPackaging-results/${{ steps.package_app.outputs.slim_package_name }}  \
          --mode test \
          --generate-feedback \
          --output-file "${{ steps.version_information.outputs.artifact_name_prefix }}_AppInspect-results.json"
    - name: Deploy to GitHub Releases for Stable Version ðŸš€
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ steps.version_information.outputs.app_version }}"
        name: "v${{ steps.version_information.outputs.app_version }}"
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          /home/runner/work/visualization_toolbox/staging_AppPackaging-results/${{ steps.version_information.outputs.tar_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
