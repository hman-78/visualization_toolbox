/**
 * To be called after a timeline custom render item was clicked upon
*/
const _setCustomTokens = function (params, tmpChartInstance) {
    
    // Get token models
    var defaultTokenModel = this.splunkjs.mvc.Components.get("default");

    // Get component ID
    var splunkAutoGeneratedComponentId = tmpChartInstance._dom.closest('.dashboard-element.viz')?.id;
    var activeVizComponent = this.splunkjs.mvc.Components.get(splunkAutoGeneratedComponentId);
    
    // Set tokens for drilldown
    console.log('Set tokens for drilldown...');
    defaultTokenModel.set('hman_ts_duration', params.data.value[2]);
    defaultTokenModel.set('hman_ts_series', params.data.value[3]);
    defaultTokenModel.set('hman_ts_legend', params.data.value[4]);
    defaultTokenModel.set('hman_ts_color', params.data.value[5]);
    defaultTokenModel.set('hman_ts_start_time', params.data.value[7]);
    defaultTokenModel.set('hman_ts_end_time', params.data.value[8]);


    // Retrieve current token values
    var hmanTsDuration = defaultTokenModel.get('hman_ts_duration');
    var hmanTsSeries = defaultTokenModel.get('hman_ts_series');
    var hmanTsLegend = defaultTokenModel.get('hman_ts_legend');
    var hmanTsColor = defaultTokenModel.get('hman_ts_color');
    var hmanTsStartTime = defaultTokenModel.get('hman_ts_start_time');
    var hmanTsEndTime = defaultTokenModel.get('hman_ts_end_time');

    // Execute this code only if there is a drilldown definition associated with the custom visualisation
    if(typeof activeVizComponent._events !== 'undefined' && typeof activeVizComponent._events.drilldown !== 'undefined') {
        
        //Re-render the drilldown link associated with the active visualisation
        var drilldownDynamicLink = activeVizComponent._events.drilldown[0].ctx.attributes.actions[0].value;
        drilldownDynamicLink = drilldownDynamicLink
           .replace('$hman_ts_duration$', hmanTsDuration ? encodeURIComponent(hmanTsDuration) : '')
           .replace('$hman_ts_series$', hmanTsSeries ? encodeURIComponent(hmanTsSeries) : '')
           .replace('$hman_ts_legend$', hmanTsLegend ? encodeURIComponent(hmanTsLegend) : '')
           .replace('$hman_ts_color$', hmanTsColor ? encodeURIComponent(hmanTsColor) : '')
           .replace('$hman_ts_start_time$', hmanTsStartTime ? encodeURIComponent(hmanTsStartTime) : '')
           .replace('$hman_ts_end_time$', hmanTsEndTime ? encodeURIComponent(hmanTsEndTime) : '')
        activeVizComponent._events.drilldown[0].ctx.attributes.actions[0].value = drilldownDynamicLink;
        // Simulate native splunk drilldown
        console.log('Simulate native splunk drilldown');
        activeVizComponent.trigger('drilldown', {
            name: 'click',
            value: 'drilldown',
            data: {
                click: 'row',   // or 'cell'
                name: 'customDrilldown',    // passed to click.name when data.click = 'cell'
                value: [hmanTsStartTime, hmanTsEndTime, hmanTsDuration, hmanTsSeries, hmanTsLegend, hmanTsColor],   // passed to click.value when data.click = 'cell'
            }
        });
    }
}

module.exports = _setCustomTokens;